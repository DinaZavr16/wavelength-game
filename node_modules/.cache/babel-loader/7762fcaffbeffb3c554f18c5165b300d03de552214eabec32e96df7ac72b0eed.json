{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dinaf\\\\wavelength-app-new\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./GameBoard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  targetAngle,\n  isTargetVisible,\n  onGuess,\n  roundNumber,\n  onHideTarget,\n  onRevealTarget,\n  onNextRound\n}) => {\n  _s();\n  const [needleAngle, setNeedleAngle] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [hasSpun, setHasSpun] = useState(false);\n  const [spectrumAngle, setSpectrumAngle] = useState(targetAngle);\n  const [lastRound, setLastRound] = useState(roundNumber);\n  const [gamePhase, setGamePhase] = useState(\"START\"); // START, SPINNING, HIDE_TARGET, GUESSING, REVEALED\n  const needleContainerRef = useRef(null);\n\n  // Reset states when round changes\n  useEffect(() => {\n    if (roundNumber !== lastRound) {\n      setHasSpun(false);\n      setIsSpinning(false);\n      setNeedleAngle(0);\n      setSpectrumAngle(targetAngle);\n      setLastRound(roundNumber);\n      setGamePhase(\"START\");\n    }\n  }, [roundNumber, lastRound, targetAngle]);\n  useEffect(() => {\n    const handleStart = e => {\n      if (gamePhase === \"GUESSING\") {\n        setIsDragging(true);\n        e.preventDefault();\n      }\n    };\n    const handleMove = e => {\n      if (!isDragging || gamePhase !== \"GUESSING\") return;\n      e.preventDefault();\n      const rect = needleContainerRef.current.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.bottom;\n      let clientX, clientY;\n      if (e.type === \"touchmove\") {\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n      const angle = Math.atan2(clientX - centerX, centerY - clientY) * 180 / Math.PI;\n      const clampedAngle = Math.max(-90, Math.min(90, angle));\n      setNeedleAngle(clampedAngle);\n      onGuess(clampedAngle);\n    };\n    const handleEnd = () => {\n      setIsDragging(false);\n    };\n    const needleContainer = needleContainerRef.current;\n    if (needleContainer) {\n      needleContainer.addEventListener(\"mousedown\", handleStart);\n      document.addEventListener(\"mousemove\", handleMove);\n      document.addEventListener(\"mouseup\", handleEnd);\n      needleContainer.addEventListener(\"touchstart\", handleStart);\n      document.addEventListener(\"touchmove\", handleMove);\n      document.addEventListener(\"touchend\", handleEnd);\n    }\n    return () => {\n      if (needleContainer) {\n        needleContainer.removeEventListener(\"mousedown\", handleStart);\n        document.removeEventListener(\"mousemove\", handleMove);\n        document.removeEventListener(\"mouseup\", handleEnd);\n        needleContainer.removeEventListener(\"touchstart\", handleStart);\n        document.removeEventListener(\"touchmove\", handleMove);\n        document.removeEventListener(\"touchend\", handleEnd);\n      }\n    };\n  }, [isDragging, gamePhase, onGuess]);\n  const handleSpin = () => {\n    if (isSpinning) return;\n    setIsSpinning(true);\n    setGamePhase(\"SPINNING\");\n\n    // Start with current angle and spin multiple times\n    let startAngle = spectrumAngle;\n    let spins = 0;\n    const totalSpins = 3;\n    const spinInterval = setInterval(() => {\n      startAngle += 20;\n      setSpectrumAngle(startAngle);\n      if (startAngle >= 360 * (spins + 1)) {\n        spins++;\n        if (spins >= totalSpins) {\n          clearInterval(spinInterval);\n          setSpectrumAngle(targetAngle);\n          setIsSpinning(false);\n          setHasSpun(true);\n          setGamePhase(\"HIDE_TARGET\");\n        }\n      }\n    }, 50);\n  };\n  const handleHideTarget = () => {\n    onHideTarget();\n    setGamePhase(\"GUESSING\");\n  };\n  const handleRevealTarget = () => {\n    onRevealTarget();\n    setGamePhase(\"REVEALED\");\n  };\n\n  // Show spectrum based on game phase\n  const showSpectrum = gamePhase === \"SPINNING\" || gamePhase === \"HIDE_TARGET\" || gamePhase === \"REVEALED\";\n\n  // Show needle during guessing and reveal phases\n  const showNeedle = gamePhase === \"GUESSING\" || gamePhase === \"REVEALED\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"target-area\",\n      style: {\n        display: showSpectrum ? \"block\" : \"none\",\n        background: `conic-gradient(\n            from -90deg at 50% 100%,\n            #a4b0be 0deg ${spectrumAngle - 22.5 + 90}deg,\n            #ff6b6b ${spectrumAngle - 22.5 + 90}deg ${spectrumAngle - 13.5 + 90}deg,\n            #feca57 ${spectrumAngle - 13.5 + 90}deg ${spectrumAngle - 4.5 + 90}deg,\n            #48dbfb ${spectrumAngle - 4.5 + 90}deg ${spectrumAngle + 4.5 + 90}deg,\n            #feca57 ${spectrumAngle + 4.5 + 90}deg ${spectrumAngle + 13.5 + 90}deg,\n            #ff6b6b ${spectrumAngle + 13.5 + 90}deg ${spectrumAngle + 22.5 + 90}deg,\n            #a4b0be ${spectrumAngle + 22.5 + 90}deg 180deg\n          )`,\n        transition: isSpinning ? \"none\" : \"background 0.3s ease\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls\",\n      children: [gamePhase === \"START\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button spin-button\",\n        onClick: handleSpin,\n        children: \"Spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), gamePhase === \"HIDE_TARGET\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button hide-button\",\n        onClick: handleHideTarget,\n        children: \"Hide Target\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), gamePhase === \"GUESSING\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button reveal-button\",\n        onClick: handleRevealTarget,\n        children: \"Reveal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), gamePhase === \"REVEALED\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"game-button next-round-button\",\n        onClick: onNextRound,\n        children: \"Next Round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"needle-container\",\n      ref: needleContainerRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"needle\",\n        style: {\n          transform: `rotate(${needleAngle}deg)`,\n          display: showNeedle ? \"block\" : \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"KQEk7BigdIRfoz0SVZgFIN2fvzg=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","GameBoard","targetAngle","isTargetVisible","onGuess","roundNumber","onHideTarget","onRevealTarget","onNextRound","_s","needleAngle","setNeedleAngle","isDragging","setIsDragging","isSpinning","setIsSpinning","hasSpun","setHasSpun","spectrumAngle","setSpectrumAngle","lastRound","setLastRound","gamePhase","setGamePhase","needleContainerRef","handleStart","e","preventDefault","handleMove","rect","current","getBoundingClientRect","centerX","left","width","centerY","bottom","clientX","clientY","type","touches","angle","Math","atan2","PI","clampedAngle","max","min","handleEnd","needleContainer","addEventListener","document","removeEventListener","handleSpin","startAngle","spins","totalSpins","spinInterval","setInterval","clearInterval","handleHideTarget","handleRevealTarget","showSpectrum","showNeedle","className","children","style","display","background","transition","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","transform","_c","$RefreshReg$"],"sources":["C:/Users/dinaf/wavelength-app-new/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./GameBoard.css\";\r\n\r\nconst GameBoard = ({\r\n  targetAngle,\r\n  isTargetVisible,\r\n  onGuess,\r\n  roundNumber,\r\n  onHideTarget,\r\n  onRevealTarget,\r\n  onNextRound,\r\n}) => {\r\n  const [needleAngle, setNeedleAngle] = useState(0);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [isSpinning, setIsSpinning] = useState(false);\r\n  const [hasSpun, setHasSpun] = useState(false);\r\n  const [spectrumAngle, setSpectrumAngle] = useState(targetAngle);\r\n  const [lastRound, setLastRound] = useState(roundNumber);\r\n  const [gamePhase, setGamePhase] = useState(\"START\"); // START, SPINNING, HIDE_TARGET, GUESSING, REVEALED\r\n  const needleContainerRef = useRef(null);\r\n\r\n  // Reset states when round changes\r\n  useEffect(() => {\r\n    if (roundNumber !== lastRound) {\r\n      setHasSpun(false);\r\n      setIsSpinning(false);\r\n      setNeedleAngle(0);\r\n      setSpectrumAngle(targetAngle);\r\n      setLastRound(roundNumber);\r\n      setGamePhase(\"START\");\r\n    }\r\n  }, [roundNumber, lastRound, targetAngle]);\r\n\r\n  useEffect(() => {\r\n    const handleStart = (e) => {\r\n      if (gamePhase === \"GUESSING\") {\r\n        setIsDragging(true);\r\n        e.preventDefault();\r\n      }\r\n    };\r\n\r\n    const handleMove = (e) => {\r\n      if (!isDragging || gamePhase !== \"GUESSING\") return;\r\n      e.preventDefault();\r\n\r\n      const rect = needleContainerRef.current.getBoundingClientRect();\r\n      const centerX = rect.left + rect.width / 2;\r\n      const centerY = rect.bottom;\r\n\r\n      let clientX, clientY;\r\n      if (e.type === \"touchmove\") {\r\n        clientX = e.touches[0].clientX;\r\n        clientY = e.touches[0].clientY;\r\n      } else {\r\n        clientX = e.clientX;\r\n        clientY = e.clientY;\r\n      }\r\n\r\n      const angle =\r\n        (Math.atan2(clientX - centerX, centerY - clientY) * 180) / Math.PI;\r\n      const clampedAngle = Math.max(-90, Math.min(90, angle));\r\n      setNeedleAngle(clampedAngle);\r\n      onGuess(clampedAngle);\r\n    };\r\n\r\n    const handleEnd = () => {\r\n      setIsDragging(false);\r\n    };\r\n\r\n    const needleContainer = needleContainerRef.current;\r\n    if (needleContainer) {\r\n      needleContainer.addEventListener(\"mousedown\", handleStart);\r\n      document.addEventListener(\"mousemove\", handleMove);\r\n      document.addEventListener(\"mouseup\", handleEnd);\r\n      needleContainer.addEventListener(\"touchstart\", handleStart);\r\n      document.addEventListener(\"touchmove\", handleMove);\r\n      document.addEventListener(\"touchend\", handleEnd);\r\n    }\r\n\r\n    return () => {\r\n      if (needleContainer) {\r\n        needleContainer.removeEventListener(\"mousedown\", handleStart);\r\n        document.removeEventListener(\"mousemove\", handleMove);\r\n        document.removeEventListener(\"mouseup\", handleEnd);\r\n        needleContainer.removeEventListener(\"touchstart\", handleStart);\r\n        document.removeEventListener(\"touchmove\", handleMove);\r\n        document.removeEventListener(\"touchend\", handleEnd);\r\n      }\r\n    };\r\n  }, [isDragging, gamePhase, onGuess]);\r\n\r\n  const handleSpin = () => {\r\n    if (isSpinning) return;\r\n\r\n    setIsSpinning(true);\r\n    setGamePhase(\"SPINNING\");\r\n\r\n    // Start with current angle and spin multiple times\r\n    let startAngle = spectrumAngle;\r\n    let spins = 0;\r\n    const totalSpins = 3;\r\n    const spinInterval = setInterval(() => {\r\n      startAngle += 20;\r\n      setSpectrumAngle(startAngle);\r\n\r\n      if (startAngle >= 360 * (spins + 1)) {\r\n        spins++;\r\n        if (spins >= totalSpins) {\r\n          clearInterval(spinInterval);\r\n          setSpectrumAngle(targetAngle);\r\n          setIsSpinning(false);\r\n          setHasSpun(true);\r\n          setGamePhase(\"HIDE_TARGET\");\r\n        }\r\n      }\r\n    }, 50);\r\n  };\r\n\r\n  const handleHideTarget = () => {\r\n    onHideTarget();\r\n    setGamePhase(\"GUESSING\");\r\n  };\r\n\r\n  const handleRevealTarget = () => {\r\n    onRevealTarget();\r\n    setGamePhase(\"REVEALED\");\r\n  };\r\n\r\n  // Show spectrum based on game phase\r\n  const showSpectrum =\r\n    gamePhase === \"SPINNING\" ||\r\n    gamePhase === \"HIDE_TARGET\" ||\r\n    gamePhase === \"REVEALED\";\r\n\r\n  // Show needle during guessing and reveal phases\r\n  const showNeedle = gamePhase === \"GUESSING\" || gamePhase === \"REVEALED\";\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <div\r\n        className=\"target-area\"\r\n        style={{\r\n          display: showSpectrum ? \"block\" : \"none\",\r\n          background: `conic-gradient(\r\n            from -90deg at 50% 100%,\r\n            #a4b0be 0deg ${spectrumAngle - 22.5 + 90}deg,\r\n            #ff6b6b ${spectrumAngle - 22.5 + 90}deg ${\r\n            spectrumAngle - 13.5 + 90\r\n          }deg,\r\n            #feca57 ${spectrumAngle - 13.5 + 90}deg ${\r\n            spectrumAngle - 4.5 + 90\r\n          }deg,\r\n            #48dbfb ${spectrumAngle - 4.5 + 90}deg ${\r\n            spectrumAngle + 4.5 + 90\r\n          }deg,\r\n            #feca57 ${spectrumAngle + 4.5 + 90}deg ${\r\n            spectrumAngle + 13.5 + 90\r\n          }deg,\r\n            #ff6b6b ${spectrumAngle + 13.5 + 90}deg ${\r\n            spectrumAngle + 22.5 + 90\r\n          }deg,\r\n            #a4b0be ${spectrumAngle + 22.5 + 90}deg 180deg\r\n          )`,\r\n          transition: isSpinning ? \"none\" : \"background 0.3s ease\",\r\n        }}\r\n      />\r\n      <div className=\"game-controls\">\r\n        {gamePhase === \"START\" && (\r\n          <button className=\"game-button spin-button\" onClick={handleSpin}>\r\n            Spin\r\n          </button>\r\n        )}\r\n        {gamePhase === \"HIDE_TARGET\" && (\r\n          <button\r\n            className=\"game-button hide-button\"\r\n            onClick={handleHideTarget}\r\n          >\r\n            Hide Target\r\n          </button>\r\n        )}\r\n        {gamePhase === \"GUESSING\" && (\r\n          <button\r\n            className=\"game-button reveal-button\"\r\n            onClick={handleRevealTarget}\r\n          >\r\n            Reveal\r\n          </button>\r\n        )}\r\n        {gamePhase === \"REVEALED\" && (\r\n          <button\r\n            className=\"game-button next-round-button\"\r\n            onClick={onNextRound}\r\n          >\r\n            Next Round\r\n          </button>\r\n        )}\r\n      </div>\r\n      <div className=\"needle-container\" ref={needleContainerRef}>\r\n        <div\r\n          className=\"needle\"\r\n          style={{\r\n            transform: `rotate(${needleAngle}deg)`,\r\n            display: showNeedle ? \"block\" : \"none\",\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}