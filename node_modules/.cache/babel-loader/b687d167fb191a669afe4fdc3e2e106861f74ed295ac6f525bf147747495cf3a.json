{"ast":null,"code":"import React,{useState,useEffect,useRef}from\"react\";import\"./GameBoard.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GameBoard=_ref=>{let{targetAngle,isTargetVisible,onGuess,roundNumber,onHideTarget,onRevealTarget,onNextRound}=_ref;const[needleAngle,setNeedleAngle]=useState(0);const[isDragging,setIsDragging]=useState(false);const[isSpinning,setIsSpinning]=useState(false);const[hasSpun,setHasSpun]=useState(false);const[spectrumAngle,setSpectrumAngle]=useState(targetAngle);const[lastRound,setLastRound]=useState(roundNumber);const[gamePhase,setGamePhase]=useState(\"START\");// START, SPINNING, HIDE_TARGET, GUESSING, REVEALED\nconst needleContainerRef=useRef(null);// Reset states when round changes\nuseEffect(()=>{if(roundNumber!==lastRound){setHasSpun(false);setIsSpinning(false);setNeedleAngle(0);setSpectrumAngle(targetAngle);setLastRound(roundNumber);setGamePhase(\"START\");}},[roundNumber,lastRound,targetAngle]);useEffect(()=>{const handleStart=e=>{if(gamePhase===\"GUESSING\"){setIsDragging(true);e.preventDefault();}};const handleMove=e=>{if(!isDragging||gamePhase!==\"GUESSING\")return;e.preventDefault();const rect=needleContainerRef.current.getBoundingClientRect();const centerX=rect.left+rect.width/2;const centerY=rect.bottom;let clientX,clientY;if(e.type===\"touchmove\"){clientX=e.touches[0].clientX;clientY=e.touches[0].clientY;}else{clientX=e.clientX;clientY=e.clientY;}const angle=Math.atan2(clientX-centerX,centerY-clientY)*180/Math.PI;const clampedAngle=Math.max(-90,Math.min(90,angle));setNeedleAngle(clampedAngle);onGuess(clampedAngle);};const handleEnd=()=>{setIsDragging(false);};const needleContainer=needleContainerRef.current;if(needleContainer){needleContainer.addEventListener(\"mousedown\",handleStart);document.addEventListener(\"mousemove\",handleMove);document.addEventListener(\"mouseup\",handleEnd);needleContainer.addEventListener(\"touchstart\",handleStart);document.addEventListener(\"touchmove\",handleMove);document.addEventListener(\"touchend\",handleEnd);}return()=>{if(needleContainer){needleContainer.removeEventListener(\"mousedown\",handleStart);document.removeEventListener(\"mousemove\",handleMove);document.removeEventListener(\"mouseup\",handleEnd);needleContainer.removeEventListener(\"touchstart\",handleStart);document.removeEventListener(\"touchmove\",handleMove);document.removeEventListener(\"touchend\",handleEnd);}};},[isDragging,gamePhase,onGuess]);const handleSpin=()=>{if(isSpinning)return;setIsSpinning(true);setGamePhase(\"SPINNING\");// Start with current angle and spin multiple times\nlet startAngle=spectrumAngle;let spins=0;const totalSpins=3;const spinInterval=setInterval(()=>{startAngle+=20;setSpectrumAngle(startAngle);if(startAngle>=360*(spins+1)){spins++;if(spins>=totalSpins){clearInterval(spinInterval);setSpectrumAngle(targetAngle);setIsSpinning(false);setHasSpun(true);setGamePhase(\"HIDE_TARGET\");}}},50);};const handleHideTarget=()=>{onHideTarget();setGamePhase(\"GUESSING\");};const handleRevealTarget=()=>{onRevealTarget();setGamePhase(\"REVEALED\");};// Show spectrum based on game phase\nconst showSpectrum=gamePhase===\"SPINNING\"||gamePhase===\"HIDE_TARGET\"||gamePhase===\"REVEALED\";// Show needle during guessing and reveal phases\nconst showNeedle=gamePhase===\"GUESSING\"||gamePhase===\"REVEALED\";return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"board\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"target-area\",style:{display:showSpectrum?\"block\":\"none\",background:`conic-gradient(\n              from -90deg at 50% 100%,\n              #a4b0be 0deg ${spectrumAngle-22.5+90}deg,\n              #ff6b6b ${spectrumAngle-22.5+90}deg ${spectrumAngle-13.5+90}deg,\n              #feca57 ${spectrumAngle-13.5+90}deg ${spectrumAngle-4.5+90}deg,\n              #48dbfb ${spectrumAngle-4.5+90}deg ${spectrumAngle+4.5+90}deg,\n              #feca57 ${spectrumAngle+4.5+90}deg ${spectrumAngle+13.5+90}deg,\n              #ff6b6b ${spectrumAngle+13.5+90}deg ${spectrumAngle+22.5+90}deg,\n              #a4b0be ${spectrumAngle+22.5+90}deg 180deg\n            )`,transition:isSpinning?\"none\":\"background 0.3s ease\"}}),/*#__PURE__*/_jsx(\"div\",{className:\"needle-container\",ref:needleContainerRef,children:/*#__PURE__*/_jsx(\"div\",{className:\"needle\",style:{transform:`rotate(${needleAngle}deg)`,display:showNeedle?\"block\":\"none\"}})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-controls\",children:[gamePhase===\"START\"&&/*#__PURE__*/_jsx(\"button\",{className:\"game-button spin-button\",onClick:handleSpin,children:\"Spin\"}),gamePhase===\"HIDE_TARGET\"&&/*#__PURE__*/_jsx(\"button\",{className:\"game-button hide-button\",onClick:handleHideTarget,children:\"Hide Target\"}),gamePhase===\"GUESSING\"&&/*#__PURE__*/_jsx(\"button\",{className:\"game-button reveal-button\",onClick:handleRevealTarget,children:\"Reveal\"}),gamePhase===\"REVEALED\"&&/*#__PURE__*/_jsx(\"button\",{className:\"game-button next-round-button\",onClick:onNextRound,children:\"Next Round\"})]})]});};export default GameBoard;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","jsxs","_jsxs","GameBoard","_ref","targetAngle","isTargetVisible","onGuess","roundNumber","onHideTarget","onRevealTarget","onNextRound","needleAngle","setNeedleAngle","isDragging","setIsDragging","isSpinning","setIsSpinning","hasSpun","setHasSpun","spectrumAngle","setSpectrumAngle","lastRound","setLastRound","gamePhase","setGamePhase","needleContainerRef","handleStart","e","preventDefault","handleMove","rect","current","getBoundingClientRect","centerX","left","width","centerY","bottom","clientX","clientY","type","touches","angle","Math","atan2","PI","clampedAngle","max","min","handleEnd","needleContainer","addEventListener","document","removeEventListener","handleSpin","startAngle","spins","totalSpins","spinInterval","setInterval","clearInterval","handleHideTarget","handleRevealTarget","showSpectrum","showNeedle","children","className","style","display","background","transition","ref","transform","onClick"],"sources":["C:/Users/dinaf/wavelength-app-new/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./GameBoard.css\";\n\nconst GameBoard = ({\n  targetAngle,\n  isTargetVisible,\n  onGuess,\n  roundNumber,\n  onHideTarget,\n  onRevealTarget,\n  onNextRound,\n}) => {\n  const [needleAngle, setNeedleAngle] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [hasSpun, setHasSpun] = useState(false);\n  const [spectrumAngle, setSpectrumAngle] = useState(targetAngle);\n  const [lastRound, setLastRound] = useState(roundNumber);\n  const [gamePhase, setGamePhase] = useState(\"START\"); // START, SPINNING, HIDE_TARGET, GUESSING, REVEALED\n  const needleContainerRef = useRef(null);\n\n  // Reset states when round changes\n  useEffect(() => {\n    if (roundNumber !== lastRound) {\n      setHasSpun(false);\n      setIsSpinning(false);\n      setNeedleAngle(0);\n      setSpectrumAngle(targetAngle);\n      setLastRound(roundNumber);\n      setGamePhase(\"START\");\n    }\n  }, [roundNumber, lastRound, targetAngle]);\n\n  useEffect(() => {\n    const handleStart = (e) => {\n      if (gamePhase === \"GUESSING\") {\n        setIsDragging(true);\n        e.preventDefault();\n      }\n    };\n\n    const handleMove = (e) => {\n      if (!isDragging || gamePhase !== \"GUESSING\") return;\n      e.preventDefault();\n\n      const rect = needleContainerRef.current.getBoundingClientRect();\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.bottom;\n\n      let clientX, clientY;\n      if (e.type === \"touchmove\") {\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      const angle =\n        (Math.atan2(clientX - centerX, centerY - clientY) * 180) / Math.PI;\n      const clampedAngle = Math.max(-90, Math.min(90, angle));\n      setNeedleAngle(clampedAngle);\n      onGuess(clampedAngle);\n    };\n\n    const handleEnd = () => {\n      setIsDragging(false);\n    };\n\n    const needleContainer = needleContainerRef.current;\n    if (needleContainer) {\n      needleContainer.addEventListener(\"mousedown\", handleStart);\n      document.addEventListener(\"mousemove\", handleMove);\n      document.addEventListener(\"mouseup\", handleEnd);\n      needleContainer.addEventListener(\"touchstart\", handleStart);\n      document.addEventListener(\"touchmove\", handleMove);\n      document.addEventListener(\"touchend\", handleEnd);\n    }\n\n    return () => {\n      if (needleContainer) {\n        needleContainer.removeEventListener(\"mousedown\", handleStart);\n        document.removeEventListener(\"mousemove\", handleMove);\n        document.removeEventListener(\"mouseup\", handleEnd);\n        needleContainer.removeEventListener(\"touchstart\", handleStart);\n        document.removeEventListener(\"touchmove\", handleMove);\n        document.removeEventListener(\"touchend\", handleEnd);\n      }\n    };\n  }, [isDragging, gamePhase, onGuess]);\n\n  const handleSpin = () => {\n    if (isSpinning) return;\n\n    setIsSpinning(true);\n    setGamePhase(\"SPINNING\");\n\n    // Start with current angle and spin multiple times\n    let startAngle = spectrumAngle;\n    let spins = 0;\n    const totalSpins = 3;\n    const spinInterval = setInterval(() => {\n      startAngle += 20;\n      setSpectrumAngle(startAngle);\n\n      if (startAngle >= 360 * (spins + 1)) {\n        spins++;\n        if (spins >= totalSpins) {\n          clearInterval(spinInterval);\n          setSpectrumAngle(targetAngle);\n          setIsSpinning(false);\n          setHasSpun(true);\n          setGamePhase(\"HIDE_TARGET\");\n        }\n      }\n    }, 50);\n  };\n\n  const handleHideTarget = () => {\n    onHideTarget();\n    setGamePhase(\"GUESSING\");\n  };\n\n  const handleRevealTarget = () => {\n    onRevealTarget();\n    setGamePhase(\"REVEALED\");\n  };\n\n  // Show spectrum based on game phase\n  const showSpectrum =\n    gamePhase === \"SPINNING\" ||\n    gamePhase === \"HIDE_TARGET\" ||\n    gamePhase === \"REVEALED\";\n\n  // Show needle during guessing and reveal phases\n  const showNeedle = gamePhase === \"GUESSING\" || gamePhase === \"REVEALED\";\n\n  return (\n    <div>\n      <div className=\"board\">\n        <div\n          className=\"target-area\"\n          style={{\n            display: showSpectrum ? \"block\" : \"none\",\n            background: `conic-gradient(\n              from -90deg at 50% 100%,\n              #a4b0be 0deg ${spectrumAngle - 22.5 + 90}deg,\n              #ff6b6b ${spectrumAngle - 22.5 + 90}deg ${\n              spectrumAngle - 13.5 + 90\n            }deg,\n              #feca57 ${spectrumAngle - 13.5 + 90}deg ${\n              spectrumAngle - 4.5 + 90\n            }deg,\n              #48dbfb ${spectrumAngle - 4.5 + 90}deg ${\n              spectrumAngle + 4.5 + 90\n            }deg,\n              #feca57 ${spectrumAngle + 4.5 + 90}deg ${\n              spectrumAngle + 13.5 + 90\n            }deg,\n              #ff6b6b ${spectrumAngle + 13.5 + 90}deg ${\n              spectrumAngle + 22.5 + 90\n            }deg,\n              #a4b0be ${spectrumAngle + 22.5 + 90}deg 180deg\n            )`,\n            transition: isSpinning ? \"none\" : \"background 0.3s ease\",\n          }}\n        />\n        <div className=\"needle-container\" ref={needleContainerRef}>\n          <div\n            className=\"needle\"\n            style={{\n              transform: `rotate(${needleAngle}deg)`,\n              display: showNeedle ? \"block\" : \"none\",\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"game-controls\">\n        {gamePhase === \"START\" && (\n          <button className=\"game-button spin-button\" onClick={handleSpin}>\n            Spin\n          </button>\n        )}\n        {gamePhase === \"HIDE_TARGET\" && (\n          <button\n            className=\"game-button hide-button\"\n            onClick={handleHideTarget}\n          >\n            Hide Target\n          </button>\n        )}\n        {gamePhase === \"GUESSING\" && (\n          <button\n            className=\"game-button reveal-button\"\n            onClick={handleRevealTarget}\n          >\n            Reveal\n          </button>\n        )}\n        {gamePhase === \"REVEALED\" && (\n          <button\n            className=\"game-button next-round-button\"\n            onClick={onNextRound}\n          >\n            Next Round\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}